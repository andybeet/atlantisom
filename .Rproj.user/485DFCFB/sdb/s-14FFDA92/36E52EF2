{
    "contents" : "#' Collection of similar functions which load specific columns from the Atlantis functionalgroups-file\n#'\n#'\n#' This collection of function loads the Atlantis functional groups file and creates various\n#' character strings of group names or acronym names.\n#' @param file_fgs Connection of the ATLANTIS functional groups file given as complete folder/filename string.\n#' Usually \"functionalGroups.csv\".\n#' @param nc_init Connection of the ATLANTIS init file given as complete folder/filename string. Usually \"init[...].nc\".\n#' @family load functions\n#' @return Character string.\n\n#' @details Currently, the following character strings can be created\n#' - load_groups extracts the column \"Name\"\n#' - load_age_groups extracts the column \"Name\". Only groups with 10 ageclasses are selected.\n#' - load_acronym extracts the column \"Code\"\n#' - load_age_acronym extracts the column \"Code\". Only groups with 10 ageclasses are selected.\n#' - load_nonage_acronym extracts the columne \"Code\". Only groups with ageclasses different from 10 are selected.\n#' - load_fish_acronyms ectracts the column \"Code\". Only groups with InvertType equal to \"FISH\" or \"SHARK\" are selected.\n#' - load_bps extracts the names of the epibenthic biomasspools from the initial conditions file.\n#' @keywords gen\n#' @examples\n#' load_atlantis_output(model_path = file.path(\"z:\", \"Atlantis\", \"ATLANTIS NSmodel base\"), filename = \"outputNorthSea.nc\", select_groups = get_groups(), select_variable = \"ResN\", biomasspools = c(\"large_crabs\", \"small_epifauna\", \"sessile_epifauna\", \"epifaunal_macrobenthos\"))\n#' @export\n\n\n#' @export\n#' @rdname load_groups\nload_groups <- function(file_fgs){\n  result <- read_functionalgroups(file_fgs = file_fgs)\n  result <- result$Name\n  return(result)\n}\n\n#' @export\n#' @rdname load_groups\nread_functionalgroups <- function(file_fgs){\n  result <- read.table(file = file_fgs, sep = \",\", header = T, stringsAsFactors = F)\n  return(result)\n}\n\n\n#' @export\n#' @rdname load_groups\nload_age_groups <- function(file_fgs){\n  result <- read_functionalgroups(file_fgs = file_fgs)\n  result <- subset(result, NumCohorts == 10)$Name\n  return(result)\n}\n\n#' @export\n#' @rdname load_groups\nload_acronyms <- function(file_fgs){\n  result <- read_functionalgroups(file_fgs = file_fgs)\n  result <- result[, names(result) == \"Code\"]\n  return(result)\n}\n\n#' @export\n#' @rdname load_groups\nload_age_acronyms <- function(file_fgs){\n  result <- read_functionalgroups(file_fgs = file_fgs)\n  result <- subset(result, NumCohorts == 10, select = \"Code\")[,1]\n  return(result)\n}\n\n#' @export\n#' @rdname load_groups\nload_nonage_acronyms <- function(file_fgs){\n  result <- read_functionalgroups(file_fgs = file_fgs)\n  result <- subset(result, NumCohorts != 10, select = \"Code\")[,1]\n  return(result)\n}\n\n# S\n#' @export\n#' @rdname load_groups\nload_fish_acronyms <- function(file_fgs){\n  result <- read_functionalgroups(file_fgs = file_fgs)\n  # Older models use the column GroupType, newer ones use InvertType.\n  supported_columns <- c(\"InvertType\", \"GroupType\")\n  if (!any(is.element(names(result), supported_columns))) {\n    stop(paste(\"Column names in\", file_fgs, \"do not match any of\", supported_columns))\n  } else {\n    result <- result$Code[result[, is.element(names(result), supported_columns)] %in% c(\"FISH\", \"SHARK\")]\n  }\n  return(result)\n}\n\n#' This function still need to load in the initial conditions file to check the number of\n#' dimension in the \"N\" variable. Models with an updated version of the functional-groups\n#' file will be able to load the \"biomasspools\" (which aren't true biomasspools but all epibenthic\n#' groups) from the functional groups file directly. This will save considerable amount\n#' of time. In addition parameter handling will be much easier, as there is no need to pass\n#' the init-file to the function call anymore.\n#' @export\n#' @rdname helper_functions\nload_bps <- function(file_fgs, nc_init){\n  init <- RNetCDF::open.nc(filename = nc_init)\n  all_groups <- get_groups(file_fgs = file_fgs)\n  init_vars <- sapply(seq_len(RNetCDF::file.inq.nc(init)$nvars - 1),\n                      function(x) RNetCDF::var.inq.nc(init, x)$name)\n  pos_init <- sapply(paste0(all_groups, \"_N\"), function(y) which(grepl(y, x = init_vars)))\n  # Remove invertebrate cohorts > 1\n  pos_init <- sapply(pos_init, function(x) x[1])\n  pos_bps <- which(sapply(pos_init, function(x) init$var[[x]]$ndims) == 2)\n  bps <- all_groups[pos_bps]\n  return(bps)\n}\n\n\n",
    "created" : 1449509578664.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1263899302",
    "id" : "36E52EF2",
    "lastKnownWriteTime" : 1449511447,
    "path" : "C:/Users/alexk/Desktop/atlantisOM/R/load_groups.R",
    "project_path" : "R/load_groups.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}